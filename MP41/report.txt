Data Parallel Reduction

1.  How many times does your thread block synchronize to reduce its portion
    of an array to a single value?
in each block sync thread operations will be performed equivalent to its stride size which is equivalentto log2(blocksize)+1 for block size 16 in each block 5 sync thread will be performed



2.  What is the minimum, maximum, and average number of "real" operations
    that a thread will perform? "Real" operations are those that directly
    contribute to the final reduction value, i.e., iterations of the reduction
    computation.
total no of threads perform in 512(and block size 256) size array
256+128+64+32+16+8+4+2+1=511
avg use=511/256=1.996
minimum use=1
maximum use=9



#ifndef _SCAN_NAIVE_KERNEL_H_
#define _SCAN_NAIVE_KERNEL_H_

// **===--------------------- Modify this function -----------------------===**
//! @param g_data  input data in global memory
//                  result is expected in index 0 of g_data
//! @param n        input number of elements to reduce from input data
// **===------------------------------------------------------------------===**
__global__ void reduction(float *g_data, int n)
{
__shared__ float partialSum[2*16];
unsigned int t = threadIdx.x;
unsigned int start = 2*blockDim.x*blockIdx.x;
partialSum[t] = g_data[start + t];
partialSum[blockDim.x + t] = 
	g_data[start + blockDim.x + t];
for (unsigned int stride = blockDim.x; 
	stride >= 1;  stride >>= 1) 
{
  __syncthreads();
  if (t < stride)
    partialSum[t] += partialSum[t+stride];
}
if(t==0)
{
g_data[blockIdx.x]=partialSum[t];
//printf("hello");
}
}

#endif // #ifndef _SCAN_NAIVE_KERNEL_H_

